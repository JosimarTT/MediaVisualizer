// <auto-generated />
using System;
using MediaVisualizer.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MediaVisualizer.DataAccess.Migrations
{
    [DbContext(typeof(MediaVisualizerDbContext))]
    [Migration("20250102054718_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("AnimeBrand", b =>
                {
                    b.Property<int>("AnimesAnimeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BrandsBrandId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AnimesAnimeId", "BrandsBrandId");

                    b.HasIndex("BrandsBrandId");

                    b.ToTable("AnimeBrand");
                });

            modelBuilder.Entity("AnimeTag", b =>
                {
                    b.Property<int>("AnimesAnimeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TagsTagId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AnimesAnimeId", "TagsTagId");

                    b.HasIndex("TagsTagId");

                    b.ToTable("AnimeTag");
                });

            modelBuilder.Entity("ArtistManga", b =>
                {
                    b.Property<int>("ArtistsArtistId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MangasMangaId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ArtistsArtistId", "MangasMangaId");

                    b.HasIndex("MangasMangaId");

                    b.ToTable("ArtistManga");
                });

            modelBuilder.Entity("ArtistManwha", b =>
                {
                    b.Property<int>("ArtistsArtistId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ManwhasManwhaId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ArtistsArtistId", "ManwhasManwhaId");

                    b.HasIndex("ManwhasManwhaId");

                    b.ToTable("ArtistManwha");
                });

            modelBuilder.Entity("AuthorManga", b =>
                {
                    b.Property<int>("AuthorsAuthorId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MangasMangaId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AuthorsAuthorId", "MangasMangaId");

                    b.HasIndex("MangasMangaId");

                    b.ToTable("AuthorManga");
                });

            modelBuilder.Entity("AuthorManwha", b =>
                {
                    b.Property<int>("AuthorsAuthorId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ManwhasManwhaId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AuthorsAuthorId", "ManwhasManwhaId");

                    b.HasIndex("ManwhasManwhaId");

                    b.ToTable("AuthorManwha");
                });

            modelBuilder.Entity("BrandManga", b =>
                {
                    b.Property<int>("BrandsBrandId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MangasMangaId")
                        .HasColumnType("INTEGER");

                    b.HasKey("BrandsBrandId", "MangasMangaId");

                    b.HasIndex("MangasMangaId");

                    b.ToTable("BrandManga");
                });

            modelBuilder.Entity("BrandManwha", b =>
                {
                    b.Property<int>("BrandsBrandId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ManwhasManwhaId")
                        .HasColumnType("INTEGER");

                    b.HasKey("BrandsBrandId", "ManwhasManwhaId");

                    b.HasIndex("ManwhasManwhaId");

                    b.ToTable("BrandManwha");
                });

            modelBuilder.Entity("MangaTag", b =>
                {
                    b.Property<int>("MangasMangaId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TagsTagId")
                        .HasColumnType("INTEGER");

                    b.HasKey("MangasMangaId", "TagsTagId");

                    b.HasIndex("TagsTagId");

                    b.ToTable("MangaTag");
                });

            modelBuilder.Entity("ManwhaTag", b =>
                {
                    b.Property<int>("ManwhasManwhaId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TagsTagId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ManwhasManwhaId", "TagsTagId");

                    b.HasIndex("TagsTagId");

                    b.ToTable("ManwhaTag");
                });

            modelBuilder.Entity("MediaVisualizer.DataAccess.Entities.Anime.Anime", b =>
                {
                    b.Property<int>("AnimeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Folder")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("AnimeId");

                    b.ToTable("Animes");
                });

            modelBuilder.Entity("MediaVisualizer.DataAccess.Entities.Anime.AnimeChapter", b =>
                {
                    b.Property<int>("AnimeChapterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AnimeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ChapterNumber")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Video")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("AnimeChapterId");

                    b.HasIndex("AnimeId");

                    b.ToTable("AnimeChapters");
                });

            modelBuilder.Entity("MediaVisualizer.DataAccess.Entities.Manga.Manga", b =>
                {
                    b.Property<int>("MangaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Folder")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("MangaId");

                    b.ToTable("Mangas");
                });

            modelBuilder.Entity("MediaVisualizer.DataAccess.Entities.Manga.MangaChapter", b =>
                {
                    b.Property<int>("MangaChapterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ChapterNumber")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("MangaId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PageExtension")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PagesCount")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("MangaChapterId");

                    b.HasIndex("MangaId");

                    b.ToTable("MangaChapters");
                });

            modelBuilder.Entity("MediaVisualizer.DataAccess.Entities.Manwha.Manwha", b =>
                {
                    b.Property<int>("ManwhaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Folder")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Logos")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("ManwhaId");

                    b.ToTable("Manwhas");
                });

            modelBuilder.Entity("MediaVisualizer.DataAccess.Entities.Manwha.ManwhaChapter", b =>
                {
                    b.Property<int>("ManwhaChapterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ChapterNumber")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ManwhaId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PageExtension")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PagesCount")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("ManwhaChapterId");

                    b.HasIndex("ManwhaId");

                    b.ToTable("ManwhaChapters");
                });

            modelBuilder.Entity("MediaVisualizer.DataAccess.Entities.Shared.Artist", b =>
                {
                    b.Property<int>("ArtistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("ArtistId");

                    b.ToTable("Artists");
                });

            modelBuilder.Entity("MediaVisualizer.DataAccess.Entities.Shared.Author", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("AuthorId");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("MediaVisualizer.DataAccess.Entities.Shared.Brand", b =>
                {
                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("BrandId");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("MediaVisualizer.DataAccess.Entities.Shared.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("TagId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("AnimeBrand", b =>
                {
                    b.HasOne("MediaVisualizer.DataAccess.Entities.Anime.Anime", null)
                        .WithMany()
                        .HasForeignKey("AnimesAnimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MediaVisualizer.DataAccess.Entities.Shared.Brand", null)
                        .WithMany()
                        .HasForeignKey("BrandsBrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AnimeTag", b =>
                {
                    b.HasOne("MediaVisualizer.DataAccess.Entities.Anime.Anime", null)
                        .WithMany()
                        .HasForeignKey("AnimesAnimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MediaVisualizer.DataAccess.Entities.Shared.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ArtistManga", b =>
                {
                    b.HasOne("MediaVisualizer.DataAccess.Entities.Shared.Artist", null)
                        .WithMany()
                        .HasForeignKey("ArtistsArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MediaVisualizer.DataAccess.Entities.Manga.Manga", null)
                        .WithMany()
                        .HasForeignKey("MangasMangaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ArtistManwha", b =>
                {
                    b.HasOne("MediaVisualizer.DataAccess.Entities.Shared.Artist", null)
                        .WithMany()
                        .HasForeignKey("ArtistsArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MediaVisualizer.DataAccess.Entities.Manwha.Manwha", null)
                        .WithMany()
                        .HasForeignKey("ManwhasManwhaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AuthorManga", b =>
                {
                    b.HasOne("MediaVisualizer.DataAccess.Entities.Shared.Author", null)
                        .WithMany()
                        .HasForeignKey("AuthorsAuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MediaVisualizer.DataAccess.Entities.Manga.Manga", null)
                        .WithMany()
                        .HasForeignKey("MangasMangaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AuthorManwha", b =>
                {
                    b.HasOne("MediaVisualizer.DataAccess.Entities.Shared.Author", null)
                        .WithMany()
                        .HasForeignKey("AuthorsAuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MediaVisualizer.DataAccess.Entities.Manwha.Manwha", null)
                        .WithMany()
                        .HasForeignKey("ManwhasManwhaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BrandManga", b =>
                {
                    b.HasOne("MediaVisualizer.DataAccess.Entities.Shared.Brand", null)
                        .WithMany()
                        .HasForeignKey("BrandsBrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MediaVisualizer.DataAccess.Entities.Manga.Manga", null)
                        .WithMany()
                        .HasForeignKey("MangasMangaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BrandManwha", b =>
                {
                    b.HasOne("MediaVisualizer.DataAccess.Entities.Shared.Brand", null)
                        .WithMany()
                        .HasForeignKey("BrandsBrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MediaVisualizer.DataAccess.Entities.Manwha.Manwha", null)
                        .WithMany()
                        .HasForeignKey("ManwhasManwhaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MangaTag", b =>
                {
                    b.HasOne("MediaVisualizer.DataAccess.Entities.Manga.Manga", null)
                        .WithMany()
                        .HasForeignKey("MangasMangaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MediaVisualizer.DataAccess.Entities.Shared.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ManwhaTag", b =>
                {
                    b.HasOne("MediaVisualizer.DataAccess.Entities.Manwha.Manwha", null)
                        .WithMany()
                        .HasForeignKey("ManwhasManwhaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MediaVisualizer.DataAccess.Entities.Shared.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MediaVisualizer.DataAccess.Entities.Anime.AnimeChapter", b =>
                {
                    b.HasOne("MediaVisualizer.DataAccess.Entities.Anime.Anime", "Anime")
                        .WithMany("AnimeChapters")
                        .HasForeignKey("AnimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Anime");
                });

            modelBuilder.Entity("MediaVisualizer.DataAccess.Entities.Manga.MangaChapter", b =>
                {
                    b.HasOne("MediaVisualizer.DataAccess.Entities.Manga.Manga", "Manga")
                        .WithMany("MangaChapters")
                        .HasForeignKey("MangaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manga");
                });

            modelBuilder.Entity("MediaVisualizer.DataAccess.Entities.Manwha.ManwhaChapter", b =>
                {
                    b.HasOne("MediaVisualizer.DataAccess.Entities.Manwha.Manwha", "Manwha")
                        .WithMany("ManwhaChapters")
                        .HasForeignKey("ManwhaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manwha");
                });

            modelBuilder.Entity("MediaVisualizer.DataAccess.Entities.Anime.Anime", b =>
                {
                    b.Navigation("AnimeChapters");
                });

            modelBuilder.Entity("MediaVisualizer.DataAccess.Entities.Manga.Manga", b =>
                {
                    b.Navigation("MangaChapters");
                });

            modelBuilder.Entity("MediaVisualizer.DataAccess.Entities.Manwha.Manwha", b =>
                {
                    b.Navigation("ManwhaChapters");
                });
#pragma warning restore 612, 618
        }
    }
}
