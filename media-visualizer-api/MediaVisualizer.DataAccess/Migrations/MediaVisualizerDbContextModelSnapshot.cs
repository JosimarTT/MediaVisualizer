// <auto-generated />
using System;
using MediaVisualizer.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MediaVisualizer.DataAccess.Migrations
{
    [DbContext(typeof(MediaVisualizerDbContext))]
    partial class MediaVisualizerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("MediaVisualizer.DataAccess.Entities.Anime.Anime", b =>
                {
                    b.Property<int>("AnimeKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("anime_key");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("created_date");

                    b.Property<string>("Folder")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("folder");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_date");

                    b.HasKey("AnimeKey");

                    b.ToTable("anime.anime");
                });

            modelBuilder.Entity("MediaVisualizer.DataAccess.Entities.Anime.AnimeChapter", b =>
                {
                    b.Property<int>("AnimeChapterKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("chapter_key");

                    b.Property<int>("AnimeKey")
                        .HasColumnType("INTEGER")
                        .HasColumnName("anime_key");

                    b.Property<int>("ChapterNumber")
                        .HasColumnType("INTEGER")
                        .HasColumnName("chapter_number");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("created_date");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_date");

                    b.HasKey("AnimeChapterKey");

                    b.HasIndex("AnimeKey");

                    b.ToTable("anime.chapter");
                });

            modelBuilder.Entity("MediaVisualizer.DataAccess.Entities.Anime.AnimeChapterBrand", b =>
                {
                    b.Property<int>("AnimeChapterKey")
                        .HasColumnType("INTEGER")
                        .HasColumnName("chapter_key")
                        .HasColumnOrder(0);

                    b.Property<int>("BrandKey")
                        .HasColumnType("INTEGER")
                        .HasColumnName("brand_key")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("created_date");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_date");

                    b.HasKey("AnimeChapterKey", "BrandKey");

                    b.HasIndex("BrandKey");

                    b.ToTable("anime.chapter_brand", (string)null);
                });

            modelBuilder.Entity("MediaVisualizer.DataAccess.Entities.Anime.AnimeChapterTag", b =>
                {
                    b.Property<int>("AnimeChapterKey")
                        .HasColumnType("INTEGER")
                        .HasColumnName("chapter_key")
                        .HasColumnOrder(0);

                    b.Property<int>("TagKey")
                        .HasColumnType("INTEGER")
                        .HasColumnName("tag_key")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("created_date");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_date");

                    b.HasKey("AnimeChapterKey", "TagKey");

                    b.HasIndex("TagKey");

                    b.ToTable("anime.chapter_tag", (string)null);
                });

            modelBuilder.Entity("MediaVisualizer.DataAccess.Entities.Manga.Manga", b =>
                {
                    b.Property<int>("MangaKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("manga_key");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("created_date");

                    b.Property<string>("Folder")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("folder");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_date");

                    b.HasKey("MangaKey");

                    b.ToTable("manga.manga");
                });

            modelBuilder.Entity("MediaVisualizer.DataAccess.Entities.Manga.MangaChapter", b =>
                {
                    b.Property<int>("MangaChapterKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("chapter_key");

                    b.Property<int>("ChapterNumber")
                        .HasColumnType("INTEGER")
                        .HasColumnName("chapter_number");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("created_date");

                    b.Property<int>("MangaKey")
                        .HasColumnType("INTEGER")
                        .HasColumnName("manga_key");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_date");

                    b.HasKey("MangaChapterKey");

                    b.HasIndex("MangaKey");

                    b.ToTable("manga.chapter");
                });

            modelBuilder.Entity("MediaVisualizer.DataAccess.Entities.Manga.MangaChapterArtist", b =>
                {
                    b.Property<int>("MangaChapterKey")
                        .HasColumnType("INTEGER")
                        .HasColumnName("chapter_key")
                        .HasColumnOrder(0);

                    b.Property<int>("ArtistKey")
                        .HasColumnType("INTEGER")
                        .HasColumnName("artist_key")
                        .HasColumnOrder(1);

                    b.HasKey("MangaChapterKey", "ArtistKey");

                    b.HasIndex("ArtistKey");

                    b.ToTable("manga.chapter_artist", (string)null);
                });

            modelBuilder.Entity("MediaVisualizer.DataAccess.Entities.Manga.MangaChapterAuthor", b =>
                {
                    b.Property<int>("MangaChapterKey")
                        .HasColumnType("INTEGER")
                        .HasColumnName("chapter_key")
                        .HasColumnOrder(0);

                    b.Property<int>("AuthorKey")
                        .HasColumnType("INTEGER")
                        .HasColumnName("author_key")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("created_date");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_date");

                    b.HasKey("MangaChapterKey", "AuthorKey");

                    b.HasIndex("AuthorKey");

                    b.ToTable("manga.chapter_author", (string)null);
                });

            modelBuilder.Entity("MediaVisualizer.DataAccess.Entities.Manga.MangaChapterBrand", b =>
                {
                    b.Property<int>("MangaChapterKey")
                        .HasColumnType("INTEGER")
                        .HasColumnName("chapter_key")
                        .HasColumnOrder(0);

                    b.Property<int>("BrandKey")
                        .HasColumnType("INTEGER")
                        .HasColumnName("brand_key")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("created_date");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_date");

                    b.HasKey("MangaChapterKey", "BrandKey");

                    b.HasIndex("BrandKey");

                    b.ToTable("manga.chapter_brand", (string)null);
                });

            modelBuilder.Entity("MediaVisualizer.DataAccess.Entities.Manga.MangaChapterTag", b =>
                {
                    b.Property<int>("MangaChapterKey")
                        .HasColumnType("INTEGER")
                        .HasColumnName("chapter_key")
                        .HasColumnOrder(0);

                    b.Property<int>("TagKey")
                        .HasColumnType("INTEGER")
                        .HasColumnName("tag_key")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("created_date");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_date");

                    b.HasKey("MangaChapterKey", "TagKey");

                    b.HasIndex("TagKey");

                    b.ToTable("manga.chapter_tag", (string)null);
                });

            modelBuilder.Entity("MediaVisualizer.DataAccess.Entities.Manwha.Manwha", b =>
                {
                    b.Property<int>("ManwhaKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("manwha_key");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("created_date");

                    b.Property<string>("Folder")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("folder");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_date");

                    b.HasKey("ManwhaKey");

                    b.ToTable("manwha.manwha");
                });

            modelBuilder.Entity("MediaVisualizer.DataAccess.Entities.Manwha.ManwhaChapter", b =>
                {
                    b.Property<int>("ManwhaChapterKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("chapter_key");

                    b.Property<int>("ChapterNumber")
                        .HasColumnType("INTEGER")
                        .HasColumnName("chapter_number");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("created_date");

                    b.Property<int>("ManwhaKey")
                        .HasColumnType("INTEGER")
                        .HasColumnName("manwha_key");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_date");

                    b.HasKey("ManwhaChapterKey");

                    b.HasIndex("ManwhaKey");

                    b.ToTable("manwha.chapter");
                });

            modelBuilder.Entity("MediaVisualizer.DataAccess.Entities.Manwha.ManwhaChapterArtist", b =>
                {
                    b.Property<int>("ManwhaChapterKey")
                        .HasColumnType("INTEGER")
                        .HasColumnName("chapter_key")
                        .HasColumnOrder(0);

                    b.Property<int>("ArtistKey")
                        .HasColumnType("INTEGER")
                        .HasColumnName("artist_key")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("created_date");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_date");

                    b.HasKey("ManwhaChapterKey", "ArtistKey");

                    b.HasIndex("ArtistKey");

                    b.ToTable("manwha.chapter_artist", (string)null);
                });

            modelBuilder.Entity("MediaVisualizer.DataAccess.Entities.Manwha.ManwhaChapterAuthor", b =>
                {
                    b.Property<int>("ManwhaChapterKey")
                        .HasColumnType("INTEGER")
                        .HasColumnName("chapter_key")
                        .HasColumnOrder(0);

                    b.Property<int>("AuthorKey")
                        .HasColumnType("INTEGER")
                        .HasColumnName("author_key")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("created_date");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_date");

                    b.HasKey("ManwhaChapterKey", "AuthorKey");

                    b.HasIndex("AuthorKey");

                    b.ToTable("manwha.chapter_author", (string)null);
                });

            modelBuilder.Entity("MediaVisualizer.DataAccess.Entities.Manwha.ManwhaChapterBrand", b =>
                {
                    b.Property<int>("ManwhaChapterKey")
                        .HasColumnType("INTEGER")
                        .HasColumnName("chapter_key")
                        .HasColumnOrder(0);

                    b.Property<int>("BrandKey")
                        .HasColumnType("INTEGER")
                        .HasColumnName("brand_key")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("created_date");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_date");

                    b.HasKey("ManwhaChapterKey", "BrandKey");

                    b.HasIndex("BrandKey");

                    b.ToTable("manwha.chapter_brand", (string)null);
                });

            modelBuilder.Entity("MediaVisualizer.DataAccess.Entities.Manwha.ManwhaChapterTag", b =>
                {
                    b.Property<int>("ManwhaChapterKey")
                        .HasColumnType("INTEGER")
                        .HasColumnName("chapter_key")
                        .HasColumnOrder(0);

                    b.Property<int>("TagKey")
                        .HasColumnType("INTEGER")
                        .HasColumnName("tag_key")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("created_date");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_date");

                    b.HasKey("ManwhaChapterKey", "TagKey");

                    b.HasIndex("TagKey");

                    b.ToTable("manwha.chapter_tag", (string)null);
                });

            modelBuilder.Entity("MediaVisualizer.DataAccess.Entities.Shared.Artist", b =>
                {
                    b.Property<int>("ArtistKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("artist_key");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("created_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_date");

                    b.HasKey("ArtistKey");

                    b.ToTable("shared.artist");
                });

            modelBuilder.Entity("MediaVisualizer.DataAccess.Entities.Shared.Author", b =>
                {
                    b.Property<int>("AuthorKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("author_key");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("created_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_date");

                    b.HasKey("AuthorKey");

                    b.ToTable("shared.author");
                });

            modelBuilder.Entity("MediaVisualizer.DataAccess.Entities.Shared.Brand", b =>
                {
                    b.Property<int>("BrandKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("brand_key");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("created_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_date");

                    b.HasKey("BrandKey");

                    b.ToTable("shared.brand");
                });

            modelBuilder.Entity("MediaVisualizer.DataAccess.Entities.Shared.Tag", b =>
                {
                    b.Property<int>("TagKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("tag_key");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("created_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_date");

                    b.HasKey("TagKey");

                    b.ToTable("shared.tag");
                });

            modelBuilder.Entity("MediaVisualizer.DataAccess.Entities.Anime.AnimeChapter", b =>
                {
                    b.HasOne("MediaVisualizer.DataAccess.Entities.Anime.Anime", "Anime")
                        .WithMany()
                        .HasForeignKey("AnimeKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Anime");
                });

            modelBuilder.Entity("MediaVisualizer.DataAccess.Entities.Anime.AnimeChapterBrand", b =>
                {
                    b.HasOne("MediaVisualizer.DataAccess.Entities.Anime.AnimeChapter", "AnimeChapter")
                        .WithMany()
                        .HasForeignKey("AnimeChapterKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MediaVisualizer.DataAccess.Entities.Shared.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AnimeChapter");

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("MediaVisualizer.DataAccess.Entities.Anime.AnimeChapterTag", b =>
                {
                    b.HasOne("MediaVisualizer.DataAccess.Entities.Anime.AnimeChapter", "AnimeChapter")
                        .WithMany()
                        .HasForeignKey("AnimeChapterKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MediaVisualizer.DataAccess.Entities.Shared.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AnimeChapter");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("MediaVisualizer.DataAccess.Entities.Manga.MangaChapter", b =>
                {
                    b.HasOne("MediaVisualizer.DataAccess.Entities.Manga.Manga", "Manga")
                        .WithMany()
                        .HasForeignKey("MangaKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manga");
                });

            modelBuilder.Entity("MediaVisualizer.DataAccess.Entities.Manga.MangaChapterArtist", b =>
                {
                    b.HasOne("MediaVisualizer.DataAccess.Entities.Shared.Artist", "Artist")
                        .WithMany()
                        .HasForeignKey("ArtistKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MediaVisualizer.DataAccess.Entities.Manga.MangaChapter", "MangaChapter")
                        .WithMany()
                        .HasForeignKey("MangaChapterKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");

                    b.Navigation("MangaChapter");
                });

            modelBuilder.Entity("MediaVisualizer.DataAccess.Entities.Manga.MangaChapterAuthor", b =>
                {
                    b.HasOne("MediaVisualizer.DataAccess.Entities.Shared.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MediaVisualizer.DataAccess.Entities.Manga.MangaChapter", "MangaChapter")
                        .WithMany()
                        .HasForeignKey("MangaChapterKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("MangaChapter");
                });

            modelBuilder.Entity("MediaVisualizer.DataAccess.Entities.Manga.MangaChapterBrand", b =>
                {
                    b.HasOne("MediaVisualizer.DataAccess.Entities.Shared.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MediaVisualizer.DataAccess.Entities.Manga.MangaChapter", "MangaChapter")
                        .WithMany()
                        .HasForeignKey("MangaChapterKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("MangaChapter");
                });

            modelBuilder.Entity("MediaVisualizer.DataAccess.Entities.Manga.MangaChapterTag", b =>
                {
                    b.HasOne("MediaVisualizer.DataAccess.Entities.Manga.MangaChapter", "MangaChapter")
                        .WithMany()
                        .HasForeignKey("MangaChapterKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MediaVisualizer.DataAccess.Entities.Shared.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MangaChapter");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("MediaVisualizer.DataAccess.Entities.Manwha.ManwhaChapter", b =>
                {
                    b.HasOne("MediaVisualizer.DataAccess.Entities.Manwha.Manwha", "Manwha")
                        .WithMany()
                        .HasForeignKey("ManwhaKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manwha");
                });

            modelBuilder.Entity("MediaVisualizer.DataAccess.Entities.Manwha.ManwhaChapterArtist", b =>
                {
                    b.HasOne("MediaVisualizer.DataAccess.Entities.Shared.Artist", "Artist")
                        .WithMany()
                        .HasForeignKey("ArtistKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MediaVisualizer.DataAccess.Entities.Manwha.ManwhaChapter", "ManwhaChapter")
                        .WithMany()
                        .HasForeignKey("ManwhaChapterKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");

                    b.Navigation("ManwhaChapter");
                });

            modelBuilder.Entity("MediaVisualizer.DataAccess.Entities.Manwha.ManwhaChapterAuthor", b =>
                {
                    b.HasOne("MediaVisualizer.DataAccess.Entities.Shared.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MediaVisualizer.DataAccess.Entities.Manwha.ManwhaChapter", "ManwhaChapter")
                        .WithMany()
                        .HasForeignKey("ManwhaChapterKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("ManwhaChapter");
                });

            modelBuilder.Entity("MediaVisualizer.DataAccess.Entities.Manwha.ManwhaChapterBrand", b =>
                {
                    b.HasOne("MediaVisualizer.DataAccess.Entities.Shared.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MediaVisualizer.DataAccess.Entities.Manwha.ManwhaChapter", "ManwhaChapter")
                        .WithMany()
                        .HasForeignKey("ManwhaChapterKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("ManwhaChapter");
                });

            modelBuilder.Entity("MediaVisualizer.DataAccess.Entities.Manwha.ManwhaChapterTag", b =>
                {
                    b.HasOne("MediaVisualizer.DataAccess.Entities.Manwha.ManwhaChapter", "ManwhaChapter")
                        .WithMany()
                        .HasForeignKey("ManwhaChapterKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MediaVisualizer.DataAccess.Entities.Shared.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ManwhaChapter");

                    b.Navigation("Tag");
                });
#pragma warning restore 612, 618
        }
    }
}
